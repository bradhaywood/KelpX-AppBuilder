First off, "use" the AppBuilder in your Base App, making sure to pass the argument 'Base'

  use KelpX::AppBuilder 'Base';

This will create the build method for you based on what you put in "maps". See below.

In your base app, create a "maps" function returning a hashref of your maps table

sub maps {
    {
        '/' => BaseApp::Controller::Root->can('index'),
        '/login' => BaseApp::Controller::Auth->can('login'),
        '/accounts/manage/:id' => { to => BaseApp::Controller::Accounts->can('manage'), bridge => 1 },
        '/accounts/manage/:id/view', BaseApp::Controller::Accounts->can('view'),
    }
}

In your base app, put the assets and views into a lib/auto directory

ie: MyApp/lib/auto/MyApp/views
    MyApp/lib/auto/MyApp/assets

This is so File::ShareDir knows where to find them. It also means we need to change the config.pl a little.
"use" your base module

  use BaseApp;

Then set the path to your views/assets
  my $path = File::ShareDir::module_dir( 'BaseApp' );

With your assets

  middleware_init => {
        Static => {
            path => qw{^/assets/|^/apps/},
            root => $path,
        },
      
        ...
  }

The problem I've found with this is that root doesn't appear to work with array refs, so I don't think you can have more than one path like the templates.. This doesn't have to be a major issue - just stick all your assets in the same place.

Now you can tell your templates where they are, but also make sure local ones can still be found.

 # Enable UTF-8 in Template
 'Template::Toolkit' => {
      ENCODING => 'utf8',
      INCLUDE_PATH => [
        './views',
        $path . '/views'
      ],
      RELATIVE => 1,
      TAG_STYLE => 'asp',
  },

Now, in your new app, we need to include the AppBuilder stuff, so 
  
  use KelpX::AppBuilder;

Then inside your "build" function

  sub build {
      my $self = shift;
      my $r    = $self->routes;

      ## local routes
      $r->add('/home', sub { "Hey there, this is from MyApp!" });

      ## add in base app routes
      KelpX::AppBuilder->new('BaseApp')->add_maps($r);
  }

Now once you run your new app as normal, you should be able to view the paths from your base app!
